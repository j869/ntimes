<%- include('../partials/header', { title, user, messages: messages }) %>

<div class="modal fade" id="dynamicAlertModal" tabindex="-1" role="dialog" aria-labelledby="dynamicAlertModalLabel" aria-hidden="true" style="color: rgb(102, 0, 0);">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="dynamicAlertModalLabel">Alert</h5>
          <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body" id="dynamicAlertModalBody">
          <!-- Alert message will be injected here -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

    <div class="main col py-3 px-4 sticky-top titlebar">
        <h1 class="pagetitle pb-2">Timesheet Entry</h1>
    </div>
    <div class="row pt-0 mx-4">
        <div class="col-md-3">
            <form id="timesheetForm" action="/timesheetEntry" method="POST" onsubmit="return handleTimesheetSubmit(event)">
                <div class="form-group">
                    <label for="work_date">Work Date: </label>
                    <input type="date" id="work_date" name="work_date" class="form-control" value="<%=selectedDate%>"
                        required>
                </div>
                <div class="form-group">
                    <label for="time_start">Time Start:</label>
                    <input type="time" id="time_start" name="time_start" class="form-control" required value="09:00">
                </div>
                <div class="form-group">
                    <label for="time_finish">Time Finish:</label>
                    <input type="time" id="time_finish" name="time_finish" class="form-control" required value="05:00"> 
                </div>
                <div class="form-group">
                    <label for="time_lunch">Time Lunch (min):</label>
                    <input type="number" value="30" id="time_lunch" name="time_lunch" class="form-control" required
                        value="30">
                </div>
                <div class="form-group">
                    <label for="time_extra_break">Break (min):</label>
                    <input type="number" value="0" id="time_extra_break" name="time_extra_break" class="form-control"
                        required value="0">
                </div>
                <div class="form-group">
                    
                    <label for="time_total">Time Total:</label>
              
                    <input type="text" id="time_total" name="time_total" class="form-control readonly" readonly
                        value="08:00">
                        <p id="timeTotalErrorMessage" style="color: rgb(245, 65, 65); font-size: .9rem;">Negative Time Total</p>
                </div>

        </div>
        <div class="col-md-9">
            <div class="form-group">
                <label for="locationDropdown">Location:</label>

                <style>
                .item-container {
                     max-height: 200px;
                     overflow-y: auto;
                     border: none;
                     padding: 0;
                     margin: 0;
                     list-style-type: none;
                     background-color: #f9f9f9;
 
                }
                </style>
                
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="locationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        Select Location
                    </button>
                    <input type="hidden" id="location_id" name="location_id">
                    
                    <ul class="dropdown-menu" aria-labelledby="locationDropdown">
                        <li>
                            <input type="text" id="locationSearch" class="form-control" placeholder="Search...">
                            <li><hr class="dropdown-divider"></li>
                            
                            <li style="font-weight: bold;"><label for="">Recent Location: </label></li>
                            <% recentLocation.forEach(location => { %>
                                <li><a class="dropdown-item" href="#" data-value="<%= location.location_id %>"><%= location.location_name %></a></li>
                            <% }); %>
                        </li>
                        <li><hr class="dropdown-divider"></li>

                        <li style="font-weight: bold;"><label for="">All Location: </label></li>
                        <div class="item-container">
                            <% location.forEach(location => { %>
                                <li><a class="dropdown-item" href="#" data-value="<%= location.location_id %>"><%= location.location_name %></a></li>
                            <% }); %>
                            </div>
                        
                    </ul>
                </div>
            </div>
            <div class="form-group">
                <label for="comment">Comment:</label>
                <textarea id="comment" name="comment" class="form-control" rows="11" cols="50"></textarea>
            </div>

        </div>

       
        <div class="col-md-12">
            <div class="row"> 
            <%if(userWorkSchedule[0].schedule_id != 0) {%>
                <div class="col-md-3">
                    <div class="form-group">
                        <label id="variance_lbl" for="flexi_accrued">Variance:</label>
                        <input type="text" id="variance" name="variance" class="form-control readonly" readonly>
                    </div>
                </div>
               
                <div class="col-md-9">
                    <div class="form-group">
                        <label id="variance_type_lbl" for="variance_type">Variance Type:</label>
                        <select id="variance_type" name="variance_type" class="form-control mandatory">
                            <% if(userWorkSchedule[0].disable_flexi == false ) { %>
                                <option value="flexi">Flexitime</option>
                             <%}%>
 
                             <% if(userWorkSchedule[0].disable_til == false ) { %>
                                 <option value="til">TIL</option>
                              <%}%>
                            <option value="overtime">Overtime</option>
                            <option value="leave">Leave</option>
                            <option value="mixed">Custom Variance</option>
                        </select>
                    </div>
                </div>
            <%} else {%>
                <div class="col-md-3">
                    <div class="form-group">
                        <label id="variance_lbl" for="flexi_accrued"></label>
                        <input type="hidden" id="variance" name="variance" class="form-control readonly" readonly>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="form-group">
                        <label id="variance_type_lbl" for="variance_type"></label>
                        <select id="variance_type" style="display: none;" name="variance_type" class="form-control mandatory">
                        
                            
                            <% if(userWorkSchedule[0].disable_flexi == false ) { %>
                               <option value="flexi">Flexitime</option>
                            <%}%>

                            <% if(userWorkSchedule[0].disable_til == false ) { %>
                                <option value="til">TIL</option>
                             <%}%>

                           
                            <option value="overtime">Overtime</option>
                            <option value="leave">Leave</option>
                            <option value="mixed">Custom Variance</option>
                        </select>
                    </div>
                </div>
            <%}%>
            </div>
       
            <div class="form-group">
                <label for="notes">Notes:</label>
                <textarea id="notes" name="notes" class="form-control" rows="4" cols="50"></textarea>
            </div>
            <button type="submit" class="btn btnprimary mt-2">Submit</button>
        </div>
    


    
        <div class="row pt-4">
            <div class="col-md-4">
                <!-- Flexitime -->
                <div class="form-group">
                    <label for="flexi_accrued">Accrue Flexi:</label>
                    <input type="text" id="flexi_accrued" name="flexi_accrued" class="form-control calculated-field"
                        step="3600" readonly>
                </div>
            </div>
            <div class="col-md-4">
                <!-- TIL -->
                <div class="form-group">
                    <label for="til_accrued">Accrue TIL:</label>
                    <input type="text" id="til_accrued" name="til_accrued" class="form-control calculated-field"
                        readonly>
                </div>
            </div>
            <div class="col-md-4">
                <!-- Overtime -->
                <div class="form-group">
                    <label for="time_overtime">Overtime:</label>
                    <input type="text" id="time_overtime" name="time_overtime" class="form-control calculated-field"
                        readonly>
                </div>
            </div>
        </div>
        <div class="row pb-4">
            <div class="col-md-4">
                <!-- Flexitime -->
                <div class="form-group">
                    <label for="flexi_taken">Utilise Flexi:</label>
                    <input type="text" id="flexi_taken" name="flexi_taken" class="form-control calculated-field"
                        readonly>
                </div>
            </div>
            <div class="col-md-4">
                <!-- TIL -->
                <div class="form-group">
                    <label for="til_taken">Utilise TIL:</label>
                    <input type="text" id="til_taken" name="til_taken" class="form-control calculated-field" readonly>
                </div>
            </div>
            <div class="col-md-4">
                <!-- Leave -->
                <div class="form-group">
                    <label for="time_leave">leave:</label>
                    <input type="text" id="time_leave" name="time_leave" class="form-control calculated-field" readonly>
                </div>
            </div>
        </div>
    </div>

    </section>

    <%- include('../partials/footer') %>


        <script>


            // document.addEventListener('DOMContentLoaded', function () {
            //         const userLocation = '= userLocation %>';
            //         console.log('User Location:', userLocation);
            //         // You can use the userLocation variable in your script logic here
            //     });
            // <
            console.log("a1")

            
     

            document.addEventListener('DOMContentLoaded', function () {
                //set Work Date

        function showAlertModal(message) {
            document.getElementById('dynamicAlertModalBody').innerText = message;
            $('#dynamicAlertModal').modal('show');
        }
    
 



                console.log("b1")

        const workDateInput = document.getElementById('work_date');
        const forDate = '<%= locals.forDate %>'; 
           
        const schedule_id = <%= userWorkSchedule[0].schedule_id%>
        
        console.log('b2   forDate', forDate);
        if (forDate) {
            const year = forDate.substring(0, 4);  // Convert forDate to a Date object
            const month = forDate.substring(4, 6);
            const day = forDate.substring(6, 8);
            const formattedDate = new Date(`${year}-${month}-${day}`);
            console.log('b21   formattedDate', formattedDate);
            workDateInput.value = forDate;    // Set the value of workDateInput to the formatted date
        } else {
            const currentDate = new Date().toISOString().split('T')[0];
            console.log('b22  currentDate', currentDate);
            workDateInput.value = currentDate;
        }


                const varianceTypeSelect = document.getElementById('variance_type');
                const inputsToClear = [
                    'flexi_accrued', 'flexi_taken', 'til_accrued', 'til_taken', 'time_overtime', 'time_leave'
                ];

                //hide variance by default
                document.getElementById('variance').style.display = 'none';
                document.getElementById('variance_lbl').style.display = 'none';
                document.getElementById('variance_type').style.display = 'none';
                document.getElementById('variance_type_lbl').style.display = 'none';
                document.getElementById('variance_type').value = '';

                // Add event listener for change event on variance_type select
                varianceTypeSelect.addEventListener('change', function () {
                    console.log("c1");
                    // Clear inputs
                    inputsToClear.forEach(inputId => {
                        const input = document.getElementById(inputId);
                        input.value = "";
                    });

                    // Trigger the calculateTimeTotal function on page load
                    calculateTimeTotal();
                });


                // Function to calculate time total
// Function to calculate time total
function calculateTimeTotal() {
    console.log("d1   calculateTimeTotal()");

    const paidHour = <%= userWorkSchedule[0].paidHour %>;

    const timeStartInput = document.getElementById('time_start');
    const timeFinishInput = document.getElementById('time_finish');
    const timeTotalInput = document.getElementById('time_total');
    const timeLunchInput = document.getElementById('time_lunch');
    const timeExtraBreakInput = document.getElementById('time_extra_break');
    const varianceInput = document.getElementById('variance');
    const varianceSelect = document.getElementById('variance_type');
    const commentTextarea = document.getElementById('comment');

    const defaultLunchBreak = 30

    const timeStart = timeStartInput.value;
    const timeFinish = timeFinishInput.value;
    const timeLunch = parseFloat(timeLunchInput.value) * 60 * 1000 || 0; // Convert to float in milliseconds, default to 0 if empty
    const timeExtraBreak = parseFloat(timeExtraBreakInput.value) * 60 * 1000 || 0; // Convert to float in milliseconds, default to 0 if empty

    if (timeStart && timeFinish) {
        // Calculate time difference
        const startTime = new Date('1970-01-01 ' + timeStart);
        const finishTime = new Date('1970-01-01 ' + timeFinish);
        let timeDifference;

        if (finishTime < startTime) {
            // Handle overnight work
            timeDifference = (24 * 60 * 60 * 1000) - (startTime - finishTime) - timeLunch - timeExtraBreak;
        } else {
            timeDifference = finishTime - startTime - timeLunch - timeExtraBreak;
        }

        const totalHours = timeDifference / (1000 * 60 * 60); // Decimal variance in hours

        let varianceHours = totalHours - paidHour;
        varianceHours = varianceHours.toFixed(4); // Round to 4 decimal places

        if (varianceHours < 0) {
            varianceHours = 0;
        }

        // read variance Type 
        if (varianceHours <= 0.4 && varianceHours >= 0) {
            varianceInput.value = "";
            commentTextarea.removeAttribute("required");
            console.log('a33    ', commentTextarea.attributes);
            varianceSelect.removeAttribute("required");
            varianceSelect.querySelector('option[value="leave"]').style.display = 'block';
            varianceSelect.querySelector('option[value="overtime"]').style.display = 'block';
            varianceSelect.value = "";

            document.getElementById('variance').style.display = 'none';
            document.getElementById('variance_lbl').style.display = 'none';
            document.getElementById('variance_type').style.display = 'none';
            document.getElementById('variance_type_lbl').style.display = 'none';
            commentTextarea.classList.remove('mandatory');
        } else {
            if (schedule_id != 0) {
                varianceInput.value = varianceHours;
                commentTextarea.setAttribute("required", "required");
                console.log('a33    ', commentTextarea.attributes);
                varianceSelect.setAttribute("required", "required");
                document.getElementById('variance').style.display = 'block';
                document.getElementById('variance_lbl').style.display = 'block';
                document.getElementById('variance_type').style.display = 'block';
                document.getElementById('variance_type_lbl').style.display = 'block';
                commentTextarea.classList.add('mandatory');
            }
        }

        if (varianceHours > 0) {
            // console.log('long day.  overtime, no leave');
            varianceSelect.querySelector('option[value="leave"]').style.display = 'none';
            varianceSelect.querySelector('option[value="overtime"]').style.display = 'block';
        }

        if (varianceHours < 0) {
            // console.log('short day.  leave, not overtime');
            varianceSelect.querySelector('option[value="leave"]').style.display = 'block';
            varianceSelect.querySelector('option[value="overtime"]').style.display = 'none';
        }

        // Handle other input values based on variance type
        let flexiHours = 0;
        console.log('d3     varianceSelect.value', varianceSelect.value, varianceSelect.value === 'overtime')
        switch (varianceSelect.value) {
            case 'flexi':
                flexiHours = varianceHours;
                break;
            case 'til':
                tilHours = varianceHours;
                break;
            case 'overtime':
                console.log('d33    varianceHours', varianceHours);
                if (varianceHours > 0) {   // available on a long day only
                    overtimeHours = varianceHours;
                } else {
                    overtimeHours = 0;
                }
                console.log('d34   overtimeHours', overtimeHours);
                break;
            case 'leave':
                console.log('d35   varianceHours', varianceHours);
                if (varianceHours < 0) {    //short day only
                    leaveHours = varianceHours;
                } else {
                    leaveHours = 0;
                }
                console.log('d36    leaveHours', leaveHours);
                break;
            case 'mixed':
                console.log('d37    Selected option: Mixed');
                break;
            default:
                console.log('d38    Invalid option');
                break;
        }

        // Handle flexitime option
        if (varianceSelect.value === 'flexi') {
            const flexiAccruedInput = document.getElementById('flexi_accrued');
            const flexiTakenInput = document.getElementById('flexi_taken');
            flexiAccruedInput.value = "";
            flexiTakenInput.value = "";
            if (flexiHours < 0) {
                flexiTakenInput.value = Math.abs(flexiHours);
            } else if (flexiHours > 0) {
                flexiAccruedInput.value = Math.abs(flexiHours);
            }
        }

        // Handle tiltime option
        if (varianceSelect.value === 'til') {
            const tilAccruedInput = document.getElementById('til_accrued');
            const tilTakenInput = document.getElementById('til_taken');
            tilAccruedInput.value = "";
            tilTakenInput.value = "";
            if (tilHours < 0) {
                tilTakenInput.value = Math.abs(tilHours);
            } else if (tilHours > 0) {
                tilAccruedInput.value = Math.abs(tilHours);
            }
        }

        // Handle overtime option
        if (varianceSelect.value === 'overtime') {
            const overtimeInput = document.getElementById('time_overtime');
            overtimeInput.value = "";
            if (overtimeHours > 0) {
                overtimeInput.value = Math.abs(overtimeHours);
            }
        }

        // Handle leave option
        console.log('varianceSelect.value', varianceSelect.value);
        if (varianceSelect.value === 'leave') {
            const leaveInput = document.getElementById('time_leave');
            leaveInput.value = "";
            if (leaveHours < 0) {
                console.log('leaveHours', leaveHours);
                leaveInput.value = Math.abs(leaveHours);
            }
        }

        // Calculate and set time total
        const hours = Math.floor(timeDifference / (1000 * 60 * 60));
        const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
        const formattedHours = hours.toString().padStart(2, '0');
        const formattedMinutes = minutes.toString().padStart(2, '0');
        let formattedTimeTotal = `${formattedHours}:${formattedMinutes}`;

        const timeTotalErrorMessage = document.getElementById("timeTotalErrorMessage")

        if (formattedHours < 0 || formattedMinutes < 0 ) {
            timeTotalInput.style.border = '2px solid red'
            timeTotalErrorMessage.style.display = 'block'
            // showAlertModal("Negative Total Time is not Allowed! Please check your finish time")
        } else {
            timeTotalInput.style.border = 'none'
            timeTotalErrorMessage.style.display = 'none'


        }

        timeTotalInput.value = formattedTimeTotal;
    }
}

// Listen for changes in the time start and time finish inputs
const timeStartInput = document.getElementById('time_start');
const timeFinishInput = document.getElementById('time_finish');
const timeLunchInput = document.getElementById('time_lunch');
const timeExtraBreakInput = document.getElementById('time_extra_break');
timeStartInput.addEventListener('input', calculateTimeTotal);
timeFinishInput.addEventListener('input', calculateTimeTotal);
timeLunchInput.addEventListener('input', calculateTimeTotal);
timeExtraBreakInput.addEventListener('input', calculateTimeTotal);

        // Listen for changes in the time start and time finish inputs
        const paidHour = <%= userWorkSchedule[0].paidHour %>; 

        // const timeStartInput = document.getElementById('time_start');
        // const timeFinishInput = document.getElementById('time_finish');
        // const timeLunchInput = document.getElementById('time_lunch');
        // const timeExtraBreakInput = document.getElementById('time_extra_break');
        // timeStartInput.addEventListener('input', calculateTimeTotal);
        // timeFinishInput.addEventListener('input', calculateTimeTotal);
        // timeLunchInput.addEventListener('input', calculateTimeTotal);
        // timeExtraBreakInput.addEventListener('input', calculateTimeTotal);

        const startTime = new Date('1970-01-01 ' + timeStartInput.value);
        const totalPaidHours = Math.floor(paidHour);
        const totalPaidMinutes = Math.round((paidHour - totalPaidHours) * 60);
        startTime.setHours(startTime.getHours() + totalPaidHours);
        startTime.setMinutes(startTime.getMinutes() + totalPaidMinutes + parseInt(timeLunchInput.value));
        timeFinishInput.value = startTime.toTimeString().slice(0, 5);
        console.log("Start", startTime.toTimeString().slice(0, 5))

                // Trigger the calculateTimeTotal function on page load
                calculateTimeTotal();

            });

            console.log("a9")


 function handleTimesheetSubmit(event) {
    const timeTotalInput = document.getElementById('time_total');
    const [hour, minute] = timeTotalInput.value.split(':');

    const varianceInput = document.getElementById('variance');
    const locationInput = document.getElementById('location_id')


    if (hour < 0 || minute < 0) {
        
        alert('Time total cannot be negative');
        return false;
        // showAlertModal('Time total cannot be negative');
    } else if (varianceInput.value < 0) {
        alert('Variance cannot be negative');
        return false;
    } else if (locationInput.value == '' || locationInput.value == null) {
        alert('Please Select Location');
        return false;
    }

}

        

        </script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('locationSearch');
        const dropdownItems = document.querySelectorAll('.dropdown-item');

        searchInput.addEventListener('keyup', function () {
            const searchText = searchInput.value.toLowerCase();

            dropdownItems.forEach(item => {
                const text = item.textContent.toLowerCase();
                const isMatch = text.includes(searchText);
                // item.style.display = isMatch ? 'block' : 'none';
                item.parentElement.style.display =  isMatch ? 'block' : 'none';
            });
        });

        dropdownItems.forEach(item => {
            item.addEventListener('click', function (e) {
                e.preventDefault();
                const value = this.getAttribute('data-value');
                const text = this.textContent;
                document.getElementById('locationDropdown').textContent = text;
                document.getElementById('locationDropdown').setAttribute('data-selected-value', value);
                document.getElementById('location_id').value = value

            });
        });
    });
</script>

