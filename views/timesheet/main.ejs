<%- include('../partials/header') %>

<style>
  /* Add any custom styles if needed */
</style>

<!-- LEAVE DAY OFF MODAL -->
<% 
  let flexiTilSum = Number(flexTilRdo.totaltil) + Number(flexTilRdo.totalflexi); 
  let isFlexiAndTil = flexiTilSum < 8 ? false : true; 
  let isRDO = Number(flexTilRdo.totalrdo) > 0 ? true : false;

  let flexiBalance = Number(flexTilRdo.totalflexi);
  let tilBalance = Number(flexTilRdo.totaltil);

  let flexiInput = 4;
  let tilInput = 4;

  if (isFlexiAndTil == true) {
    if(flexiBalance < 4 || tilBalance < 4 ) { 
      if (flexiBalance < 4) { 
        flexiInput = flexiBalance; 
        tilInput = 8 - flexiBalance; 
      } 
      if (tilBalance < 4) { 
        tilInput = tilBalance; 
        flexiInput = 8 - tilBalance; 
      } 
    } 
  } 
%>

<% if (queryMessage && queryMessage == "dateAlreadyExist" ) { %>
  <div class="alert alert-warning alert-dismissible fade show" role="alert">
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    <strong>Timesheet already filled</strong> Please Select Another date!
  </div>

  <script>
    var alertList = document.querySelectorAll(".alert");
    alertList.forEach(function (alert) {
      new bootstrap.Alert(alert);
    });
  </script>

  <div class="toast-container position-fixed top-0 end-0 p-3" data-bs-autohide="true">
    <div id="liveToast" class="toast text-bg-warning" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Timesheet Already Filled</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Please select another Date!
      </div>
    </div>
  </div>
<% } else if (queryMessage == "noSchedule") { %>
  <div class="alert alert-warning alert-dismissible fade show" role="alert">
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    <strong>You Don't have any schedule yet</strong> <br>Please Request for a work schedule first!
  </div>

  <script>
    var alertList = document.querySelectorAll(".alert");
    alertList.forEach(function (alert) {
      new bootstrap.Alert(alert);
    });
  </script>

  <div class="toast-container position-fixed top-0 end-0 p-3" data-bs-autohide="true">
    <div id="liveToast" class="toast text-bg-warning" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Timesheet Already Filled</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Please select another Date!
      </div>
    </div>
  </div>
<% } %>

<!-- LEAVE DAY OFF MODAL -->
<div class="modal fade leave_day_off_modal" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form action="/timesheets/flexiDayOff" method="post">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Take a Full Day Off</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" style="display: flex; flex-direction: column; gap: 10px;">
          <div class="form-check flex-column" style="display: flex; align-items: start;">
            <label class="form-check-label" for="til">Date:</label>
            <input type="date" name="workDate" id="workDateInput" value="" required>
          </div>
          <% if(isFlexiAndTil == true) { %>
            <% if (tilBalance >= 8 && flexiBalance < 1 || flexiBalance >= 8 && tilBalance < 1 ) { %>
              <% if(tilBalance >= 8 && flexiBalance < 1) { %>
                <div class="form-check" style="display: flex; align-items: center; gap: 5px;">
                  <input class="form-check-input" type="radio" name="dayOffOption" id="til" value="til">
                  <label class="form-check-label" for="til">Time in Lieu (TIL): <span><%= Number(flexTilRdo.totaltil).toFixed(2) %> Hrs Balance</span></label>
                </div>
                <div class="form-check flex-column" style="display: flex; align-items: start;">
                  <label class="form-check-label disabled" for="flexi">Flexi Hours: <span><%= Number(flexTilRdo.totalflexi).toFixed(2) %> Hrs Balance</span></label>
                </div>
              <% } else if (flexiBalance >= 8 && tilBalance < 1) { %>
                <div class="form-check" style="display: flex; align-items: center; gap: 5px;">
                  <input class="form-check-input" type="radio" name="dayOffOption" id="flexi" value="flexi">
                  <label class="form-check-label" for="flexi">Flexi Hours: <span><%= Number(flexTilRdo.totalflexi).toFixed(2) %> Hrs Balance</span></label>
                </div>
                <div class="form-check flex-column" style="display: flex; align-items: start;">
                  <label class="form-check-label disabled" for="til">Time in Lieu (TIL): <span><%= Number(flexTilRdo.totaltil).toFixed(2) %> Hrs Balance</span></label>
                </div>
              <% } %>
            <% } else { %>
              <% if(tilBalance < 8) { %>
                <div class="form-check flex-column" style="display: flex; align-items: start;">
                  <p style="color: rgb(12, 0, 182);">You don't have enough til balance for a day off but you can still use Mix.</p>
                  <label class="form-check-label disabled" for="til">Time in Lieu (TIL): <span><%= Number(flexTilRdo.totaltil).toFixed(2) %> Hrs Balance</span></label>
                </div>
              <% } else { %>
                <div class="form-check" style="display: flex; align-items: center; gap: 5px;">
                  <input class="form-check-input" type="radio" name="dayOffOption" id="til" value="til">
                  <label class="form-check-label" for="til">Time in Lieu (TIL): <span><%= Number(flexTilRdo.totaltil).toFixed(2) %> Hrs Balance</span></label>
                </div>
              <% } %>
              <% if(flexiBalance < 8) { %>
                <div class="form-check flex-column" style="display: flex; align-items: start;">
                  <p style="color: rgb(12, 0, 182);">You don't have enough flexi balance for a day off but you can still use Mix.</p>
                  <label class="form-check-label disabled" for="flexi">Flexi Hours: <span><%= Number(flexTilRdo.totalflexi).toFixed(2) %> Hrs Balance</span></label>
                </div>
              <% } else { %>
                <div class="form-check" style="display: flex; align-items: center; gap: 5px;">
                  <input class="form-check-input" type="radio" name="dayOffOption" id="flexi" value="flexi">
                  <label class="form-check-label" for="flexi">Flexi Hours: <span><%= Number(flexTilRdo.totalflexi).toFixed(2) %> Hrs Balance</span></label>
                </div>
              <% } %>
              <div class="form-check flex-column" style="display: flex; align-items: start; gap: 5px;">
                <div class="form-check d-flex flex-row gap-2 justify-content-center">
                  <input class="form-check-input" type="radio" name="dayOffOption" id="mix" value="mix">
                  <label class="form-check-label" for="mix">Mix</label>
                </div>
                <div id="mixInputDiv" class="row flex-row w-100 gap-3 justify-content-center align-items-center m-0">
                  <div class="col-4">
                    <label class="form-check-label" for="til">Flexi Hours:</label>
                    <input type="number" name="flexiHours" class="form-control" placeholder="<%= flexiInput %>" value="<%= flexiInput %>" max="4" min="1">
                  </div>
                  <div class="col-4">
                    <label class="form-check-label" for="til">TiL Hours:</label>
                    <input type="number" name="tilHours" class="form-control" placeholder="<%= tilInput %>" value="<%= tilInput %>" max="4" min="1">
                  </div>
                </div>
              </div>
            <% } %>
          <% } else { %>
            <% if(isRDO == true) { %>
              <div class="form-check" style="display: flex; align-items: center; gap: 5px;">
                <input class="form-check-input" type="radio" name="dayOffOption" id="rdo" value="rdo">
                <label class="form-check-label" for="rdo">Rostered Day Off (RDO): <span><%= Number(flexTilRdo.totalrdo).toFixed(2) %> Hrs Balance</span></label>
              </div>
            <% } %>
          <% } %>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btnsecondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn btnprimary">Save changes</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="main col py-3 px-4 sticky-top titlebar">
  <h1 class="pagetitle pb-2">Timesheet</h1>
  <div class="row pb-2">
    <div class="col-auto">
      <a href="/timesheetEntry" class="btn btnprimary" id="addTimesheetBtn">
        <i class="fa-solid fa-circle-plus" aria-hidden="true"></i> PV Timesheet</a>
    </div>
    <!-- <div class="col-auto">
      <a href="/emergencyEntry" class="btn btndark" id="addEmergencyBtn">
        <i class="fa-solid fa-circle-plus" aria-hidden="true"></i> Emergency</a>
    </div>   -->
 

    <div class="col-auto">
      <a href="/plannedLeave" class="btn btndark" id="addLeaveBtn">
        <i class="fas fa-door-open                          "></i> Planned Leave</a>
    </div>

    <div class="col-auto">

      <div class="btn btndark" data-bs-toggle="modal" data-bs-target="#exampleModal">
        <i class="fas fa-door-open"></i> Leave for a day</a>
      </div>
    </div>
    
    
    <!-- Add other buttons if needed -->
     
  </div>
  <div class="row pb-2">
    <div class="col-auto ms-auto">
      <label for="monthSelect">Select Month:</label>
      <select id="monthSelect" class="form-select">
        <!-- Options will be populated by JavaScript -->
      </select>
    </div>
  </div>

</div>

<div class="time-sheet-container table-responsive pt-0 mx-4">
  <table class="table" id="timesheetTable">
    <thead>
      <tr class="sticky-table-header">
        <th scope="col">Work Date</th>
        <th scope="col">Time Total</th>
        <th scope="col">Flexi</th>
        <th scope="col">TiL</th>
        <th scope="col">Leave</th>
        <th scope="col">OT</th>
        <th scope="col">Comment</th>
        <th scope="col">Actions</th>
      </tr>
    </thead>
    <tbody id="timesheetBody">
      <!-- Timesheet data will be populated by JavaScript -->
    </tbody>
  </table>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const monthSelect = document.getElementById('monthSelect');
    const timesheetBody = document.getElementById('timesheetBody');
    const tableData = <%- JSON.stringify(tableData) %>;

    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    const months = [
      "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December"
    ];

    months.forEach((month, index) => {
      const option = document.createElement('option');
      option.value = `${index + 1}-${currentYear}`;
      option.text = month;
      if (index === currentMonth) {
        option.selected = true;
      }
      monthSelect.appendChild(option);
    });

    const filterTimesheetByMonth = (monthYear) => {
  const [month, year] = monthYear.split('-').map(Number);
  const filteredData = tableData.filter(timesheet => {
    const date = new Date(timesheet.work_date);
    // Check if date is valid
    if (isNaN(date)) {
      console.error(`Invalid date: ${timesheet.work_date}`);
      return false;
    }
    return date.getMonth() + 1 === month && date.getFullYear() === year;
  }).map(timesheet => {
    // Replace null values with empty strings
    Object.keys(timesheet).forEach(key => {
      if (timesheet[key] === null) {
        timesheet[key] = '';
      }
    });
    return timesheet;
  });

  populateTimesheetTable(filteredData);
};



const populateTimesheetTable = (data) => {
  console.log("tha Data", data);
  const timesheetBody = document.getElementById('timesheetBody'); // Make sure this matches your actual table body ID
  timesheetBody.innerHTML = '';
  let lastClickedRow = null;

  data.forEach(timesheet => {
    const row = document.createElement('tr');
    row.className = `${timesheet.status === 'approved' ? 'table-success ' : ''} ${timesheet.is_weekend ? 'weekend' : ''} ${timesheet.holiday_name ? 'holiday' : ''}`;
    row.setAttribute('tabindex', '0'); // Make the row focusable
    row.innerHTML = `
      <td class="work-date">${timesheet.work_date}</td>
      <td>${timesheet.time_total}</td>
      <td>${timesheet.time_accrued}</td>
      <td>${timesheet.time_til}</td>
      <td>${timesheet.time_leave}</td>
      <td>${timesheet.time_overtime}</td>
      <td>${timesheet.holiday_name || ''} ${timesheet.comment}</td>
      <td>
        ${timesheet.id && timesheet.status !== 'approved' ? `
        <a href="/deleteTimesheet/${timesheet.id}"><i class="fa fa-solid fa-trash delete-icon" aria-hidden="true"></i></a>
        <a href="/timesheets/edit/${timesheet.id}?work_date=${timesheet.work_date.replace(/(\w+) (\d+), (\d+)/, function(match, month, day, year) { return `${year}-${(new Date(Date.parse(`${month} 1, ${year}`)).getMonth() + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`; })}"><i class="fa fa-solid fa-edit" aria-hidden="true"></i></a>
        ` : 
        ``} 

        ${timesheet.id && timesheet.status == 'approved' ? `
        <a href="/timesheets/${timesheet.id}"><i class="fa-solid fa-eye view-icon"
                            aria-hidden="true"></i></a>
        ` : 
        ``} 
      </td>
    `;

    row.addEventListener('click', () => {
      console.log('Row clicked:', timesheet);
      const selectedRows = document.querySelectorAll('.selected-row');
      selectedRows.forEach(selectedRow => {
        selectedRow.classList.remove('selected-row');
      });

      const workDate = row.querySelector('td.work-date').textContent.trim();
      console.log('work date: ', workDate);

      if (lastClickedRow && lastClickedRow !== row) {
        lastClickedRow.classList.remove('selected-row');
      }

      row.classList.toggle('selected-row');
      lastClickedRow = row;

      const addTimesheetBtn = document.getElementById('addTimesheetBtn');
      const addEmergencyBtn = document.getElementById('addEmergencyBtn');
      const addLeaveBtn = document.getElementById('addLeaveBtn');
      const workDateInput = document.getElementById('workDateInput');

      if (row.classList.contains('selected-row')) {
        const adjustedDate = new Date(workDate);
        adjustedDate.setDate(adjustedDate.getDate() + 1);
        addTimesheetBtn.href = `/timesheetEntry?date=${adjustedDate.toISOString().split('T')[0]}`;
        addEmergencyBtn.href = `/emergencyEntry?date=${adjustedDate.toISOString().split('T')[0]}`;
        addLeaveBtn.href = `/plannedLeave?date=${adjustedDate.toISOString().split('T')[0]}`;
        workDateInput.value = `${adjustedDate.toISOString().split('T')[0]}`;
      } else {
        addTimesheetBtn.href = '';
        addEmergencyBtn.href = '';
        addLeaveBtn.href = '';
        workDateInput.value = '';
      }
    });

    row.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        const workDate = row.querySelector('td.work-date').textContent.trim();
        const adjustedDate = new Date(workDate);
        adjustedDate.setDate(adjustedDate.getDate() + 1);
        window.location.href = `/timesheetEntry?date=${adjustedDate.toISOString().split('T')[0]}`;
      }
    });

    row.addEventListener('dblclick', () => {
      const workDate = row.querySelector('td.work-date').textContent.trim();
      const adjustedDate = new Date(workDate);
      adjustedDate.setDate(adjustedDate.getDate() + 1);
      window.location.href = `/timesheetEntry?date=${adjustedDate.toISOString().split('T')[0]}`;
    });

    timesheetBody.appendChild(row);
  });
};
    
monthSelect.addEventListener('change', (e) => {
      filterTimesheetByMonth(e.target.value);
    });

    filterTimesheetByMonth(`${currentMonth + 1}-${currentYear}`);
  });
</script>

<%- include('../partials/footer') %>

<script>



  //   console.log(<= tableData%>);
  // CSS class to hide columns
  const hideColumns = () => {
    const hiddenColumns = document.querySelectorAll(".hidden");
    hiddenColumns.forEach((column) => {
      column.style.display = "none";
    });
  };

  // Hide columns on page load
  document.addEventListener("DOMContentLoaded", () => {
    hideColumns();
  });

  document.addEventListener("DOMContentLoaded", () => {
    const table = document.getElementById("timesheetTable");
    table.addEventListener("click", (event) => {
      const target = event.target.closest("tr");
      const dateCell = target.querySelector(".work-date");
      if (dateCell) {
        const dateString = dateCell.textContent.trim();
        const dateParts = dateString.split(" "); // Split the date string by space
        if (dateParts.length === 3) {
          const monthStr = dateParts[0].substring(0, 3); // Get the first 3 characters of the month
          const day = dateParts[1].slice(0, -1); // Remove the comma from the day
          const year = dateParts[2];
          // Convert month abbreviation to month number
          const month =
            new Date(Date.parse(monthStr + " 1, 2022")).getMonth() + 1;
          // Format the date as 'YYYYMMDD'
          const formattedDate = `${year}${month
            .toString()
            .padStart(2, "0")}${day.padStart(2, "0")}`;
          // window.location.href = `/timesheetEntry?date=${formattedDate}`;
        }
      }
    });
  });

  let lastClickedRow = null;

document.querySelectorAll('#timesheetTable tr').forEach((row, index) => {
  console.log(row)
  row.addEventListener('click', () => {
    console.log('clicked row: ', row);
    const workDate = row.querySelector('td.work-date').textContent.trim();
    console.log('work date: ', workDate);

    if (lastClickedRow && lastClickedRow !== row) {
      lastClickedRow.classList.remove('selected-row');
    }

    row.classList.toggle('selected-row');
    lastClickedRow = row;

    // Add the selected date to the anchor
    const addTimesheetBtn = document.getElementById('addTimesheetBtn');
    const addEmergencyBtn = document.getElementById('addEmergencyBtn')
    const addLeaveBtn = document.getElementById('addLeaveBtn')
    const workDateInput = document.getElementById('workDateInput')

    if (row.classList.contains('selected-row')) {
      const adjustedDate = new Date(workDate);
      adjustedDate.setDate(adjustedDate.getDate() + 1);
      addTimesheetBtn.href = `/timesheetEntry?date=${adjustedDate.toISOString().split('T')[0]}`;
      addEmergencyBtn.href = `/emergencyEntry?date=${adjustedDate.toISOString().split('T')[0]}`;
      addLeaveBtn.href = `/plannedLeave?date=${adjustedDate.toISOString().split('T')[0]}`;
      workDateInput.value = `${adjustedDate.toISOString().split('T')[0]}`
    } else {
      addTimesheetBtn.href = '';
      addEmergencyBtn.href = '';
      addLeaveBtn.href = '';
      workDateInput.value = '';
    }
  });
});

  const toastTrigger = document.getElementById('liveToastBtn')
  const toastLiveExample = document.getElementById('liveToast')

  if (toastTrigger) {
    const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample)
    toastTrigger.addEventListener('click', () => {
      toastBootstrap.show()
    })
  }



</script>
